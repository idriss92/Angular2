System.register(['rxjs/Rx'], function(exports_1, context_1) {
    "use strict";
    var __moduleName = context_1 && context_1.id;
    var Rx_1;
    var FirebaseUtils;
    return {
        setters:[
            function (Rx_1_1) {
                Rx_1 = Rx_1_1;
            }],
        execute: function() {
            /**
             * A class that defines utility functions that help Wrap the Firebase JavaScript API.
             */
            FirebaseUtils = (function () {
                function FirebaseUtils() {
                }
                /**
                 * Wraps the given Firebase call in a Promise.
                 * When the async call returns, the Promise resolves with the callback
                 * arguments in an array.
                 * @param obj The object that the given function should be called on. This is typically your Firebase ref instance.
                 * @param fn The function that should be wrapped.
                 * @param args The Arguments that should be given to Firebase.
                 * @returns {Promise<any[]>}
                 */
                FirebaseUtils.wrapFirebaseAsyncCall = function (obj, fn, args) {
                    if (args === void 0) { args = []; }
                    args = args.slice();
                    return new Promise(function (resolve, reject) {
                        args.push(callback);
                        function callback(err) {
                            if (err !== null) {
                                reject(err);
                            }
                            else {
                                resolve(Array.prototype.slice.call(arguments));
                            }
                        }
                        fn.apply(obj, args);
                    });
                };
                /**
                 * Gets an observable that represents the given event name for the internal Firebase instance.
                 * Whenever the event is triggered by the internal Firebase instance, the Observable will resolve with the new data.
                 * This function is useful to map Firebase events to Observables.
                 * When the observable is disposed, the event listener is removed.
                 * @param firebase The Raw Firebase JavaScript API Object.
                 * @param eventName The name of the event that should be listened to.
                 * @returns {Observable<any>}
                 */
                FirebaseUtils.wrapFirebaseEvent = function (firebase, eventName) {
                    return Rx_1.Observable.create(function (observer) {
                        var callback = function () {
                            observer.next(Array.prototype.slice.call(arguments));
                        };
                        firebase.on(eventName, callback, function (err) {
                            observer.error(err);
                        });
                        return function () {
                            firebase.off(eventName, callback);
                        };
                    });
                };
                return FirebaseUtils;
            }());
            exports_1("FirebaseUtils", FirebaseUtils);
        }
    }
});
//# sourceMappingURL=firebase-utils.js.map